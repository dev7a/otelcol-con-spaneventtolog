name: Test and Tag

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, labeled]
  workflow_dispatch:
    inputs:
      tag_type:
        description: 'Type of release'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - rc
        - dev
      tag_suffix:
        description: 'Tag suffix (e.g., "feature-x", "rc1")'
        required: false
        type: string

permissions:
  contents: write

jobs:
  test-and-tag:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('spaneventtologconnector/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run tests
      run: |
        cd spaneventtologconnector
        go test -v ./...

    - name: Read version from VERSION file
      id: get_version
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Determine tag type and version
      id: tag_info
      run: |
        BASE_VERSION=${{ steps.get_version.outputs.VERSION }}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual trigger
          TAG_TYPE="${{ github.event.inputs.tag_type }}"
          if [[ -n "${{ github.event.inputs.tag_suffix }}" ]]; then
            TAG="$BASE_VERSION-$TAG_TYPE-${{ github.event.inputs.tag_suffix }}"
          else
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            TAG="$BASE_VERSION-$TAG_TYPE-$TIMESTAMP"
          fi
        elif [[ "$BRANCH_NAME" == "main" ]]; then
          # Production release
          TAG="$BASE_VERSION"
          TAG_TYPE="release"
        elif [[ "$BRANCH_NAME" =~ ^(beta|preview|rc)/ ]]; then
          # Beta release from beta/* branch
          BETA_SUFFIX=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
          TAG="$BASE_VERSION-$BETA_SUFFIX"
          TAG_TYPE="beta"
        elif [[ "${{ github.event_name }}" == "push" && "$BRANCH_NAME" != "main" ]]; then
          # Development release from any other branch
          BRANCH_CLEAN=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g')
          SHORT_SHA=${GITHUB_SHA:0:7}
          TAG="$BASE_VERSION-dev-$BRANCH_CLEAN-$SHORT_SHA"
          TAG_TYPE="dev"
        else
          TAG=""
          TAG_TYPE="none"
        fi
        
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "TAG_TYPE=$TAG_TYPE" >> $GITHUB_OUTPUT
        echo "Determined tag: $TAG (type: $TAG_TYPE)"

    - name: Create and push git tag
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.tag_info.outputs.TAG != '' && success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${{ steps.tag_info.outputs.TAG }}
        TAG_TYPE=${{ steps.tag_info.outputs.TAG_TYPE }}
        
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists. Skipping tag creation."
        else
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"
          echo "Created and pushed $TAG_TYPE tag: $TAG"
        fi
